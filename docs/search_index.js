var documenterSearchIndex = {"docs":
[{"location":"operatorandutil.html#Operators-and-utilities","page":"Operators and utilities","title":"Operators and utilities","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"<!– @autodocs Modules = [PeriDyn] –>","category":"page"},{"location":"cmodels.html#Contact-models","page":"Contact models","title":"Contact models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"RepulsionModel11\nRepulsionModel12","category":"page"},{"location":"cmodels.html#PeriDyn.RepulsionModel11","page":"Contact models","title":"PeriDyn.RepulsionModel11","text":"RepulsionModel11\n\nAbstract type for repulsion model for a single material type.\n\n\n\n\n\n","category":"type"},{"location":"cmodels.html#PeriDyn.RepulsionModel12","page":"Contact models","title":"PeriDyn.RepulsionModel12","text":"RepulsionModel12\n\nAbstract type for repulsion model for two material types.\n\n\n\n\n\n","category":"type"},{"location":"cmodels.html#Short-Range-Repulsion-Models","page":"Contact models","title":"Short Range Repulsion Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"ShortRangeRepulsionModel\nshort_range_rm_definition","category":"page"},{"location":"cmodels.html#PeriDyn.ShortRangeRepulsionModel","page":"Contact models","title":"PeriDyn.ShortRangeRepulsionModel","text":"ShortRangeRepulsionModel(spring_const::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nCreate a ShortRangeRepulsionModel for 1-2 material blocks.\n\nArguments:\n\nspring_const: Float64, the spring constant for repulsion.\nmat1: PeridynamicsMaterial, the first material block.\nmat2: PeridynamicsMaterial, the second material block.\ndistanceX: Float64, the distance factor for neighbor searching. Default is 5.\nmax_neighs: Int64, the maximum number of neighbors. Default is 50.\n\nReturns:\n\nShortRangeRepulsionModel12: The ShortRangeRepulsionModel for 1-2 material blocks.\n\n\n\n\n\nShortRangeRepulsionModel(spring_const::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nCreate a ShortRangeRepulsionModel for 1-1 material blocks.\n\nArguments:\n\nspring_const: Float64, the spring constant for repulsion.\nmat1: PeridynamicsMaterial, the material block.\ndistanceX: Float64, the distance factor for neighbor searching. Default is 5.\nmax_neighs: Int64, the maximum number of neighbors. Default is 50.\n\nReturns:\n\nShortRangeRepulsionModel11: The ShortRangeRepulsionModel for 1-1 material blocks.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.short_range_rm_definition","page":"Contact models","title":"PeriDyn.short_range_rm_definition","text":"short_range_rm_definition(spring_const, del_x, hor, dir)\n\nCalculates the repulsive force using the ShortRange repulsion model formula. The formula is: 18 * springconst / (hor^4 * pi) * (delx / hor) .* dir\n\nArguments:\n\nspring_const: Float64, the spring constant.\ndel_x: Float64, the difference in position.\nhor: Float64, the characteristic length scale.\ndir: Vector{Float64}, the direction vector.\n\nReturns:\n\nVector{Float64}: The calculated repulsive force vector.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#Simple-Spring-Models","page":"Contact models","title":"Simple Spring Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"NonLinearRepulsionModel\nLinearRepulsionModel","category":"page"},{"location":"cmodels.html#PeriDyn.NonLinearRepulsionModel","page":"Contact models","title":"PeriDyn.NonLinearRepulsionModel","text":"NonLinearRepulsionModel(exponent::Float64, stifness::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceD=1.0, distanceX=3.0, max_neighs=50)\n\nConstructs a nonlinear repulsive model for 1-2 material blocks.\n\nArguments:\n\nexponent: The exponent for the repulsive force calculation.\nstifness: The stiffness coefficient for the repulsive force calculation.\nmat1: The first PeridynamicsMaterial.\nmat2: The second PeridynamicsMaterial.\ndistanceD: The distance factor for determining the search distance of neighbors within the same material.\ndistanceX: The distance factor for determining the search distance of neighbors between different materials.\nmax_neighs: The maximum number of neighbors to consider.\n\nReturns: A NonLinearRepulsionModel12 object.\n\n\n\n\n\nNonLinearRepulsionModel(exponent::Float64, stifness::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a nonlinear repulsive model for 1-1 material blocks.\n\nArguments:\n\nexponent: The exponent for the repulsive force calculation.\nstifness: The stiffness coefficient for the repulsive force calculation.\nmat1: The PeridynamicsMaterial.\ndistanceX: The distance factor for determining the search distance of neighbors.\nmax_neighs: The maximum number of neighbors to consider.\n\nReturns: A NonLinearRepulsionModel11 object.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.LinearRepulsionModel","page":"Contact models","title":"PeriDyn.LinearRepulsionModel","text":"LinearRepulsionModel(stiffness::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a linear repulsive model for 1-2 material blocks. The constructors internally call the NonLinearRepulsionModel constructor with a nonlinearity parameter of 1 and the provided arguments.\n\nArguments:\n\nstiffness: The stiffness coefficient for the repulsive model.\nmat1: PeridynamicsMaterial representing the first material block.\nmat2: PeridynamicsMaterial representing the second material block.\ndistanceX: Optional keyword argument specifying the distance parameter (default: 5).\nmax_neighs: Optional keyword argument specifying the maximum number of neighbors (default: 50).\n\nReturns:\n\nAn instance of the LinearRepulsionModel.\n\n\n\n\n\nLinearRepulsionModel(stiffness::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a linear repulsive model for 1-1 material blocks. The constructors internally call the NonLinearRepulsionModel constructor with a nonlinearity parameter of 1 and the provided arguments.\n\nArguments:\n\nstiffness: The stiffness coefficient for the repulsive model.\nmat1: PeridynamicsMaterial representing the material block.\ndistanceX: Optional keyword argument specifying the distance parameter (default: 5).\nmax_neighs: Optional keyword argument specifying the maximum number of neighbors (default: 50).\n\nReturns:\n\nAn instance of the LinearRepulsionModel.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#LJ-Models","page":"Contact models","title":"LJ Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"LJRepulsionModel","category":"page"},{"location":"cmodels.html#PeriDyn.LJRepulsionModel","page":"Contact models","title":"PeriDyn.LJRepulsionModel","text":"LJRepulsionModel(alpha::Float64,epsilon::Float64, mat1::PeridynamicsMaterial,mat2::PeridynamicsMaterial;distanceX=5,max_neighs=50)\n\nLJ repulsive model for 1-2 material blocks.\n\n\n\n\n\nLJRepulsionModel(alpha::Float64,epsilon::Float64, mat1::PeridynamicsMaterial;distanceX=5,max_neighs=50)\n\nLJ repulsive model for 1-1 material blocks.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#Functions-for-Repulsion-Models","page":"Contact models","title":"Functions for Repulsion Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"repulsion_force\nshort_range_repulsion!\ncollision_box\nupdate_repulsive_neighs!\nRepulsionModel11_gcal\nRepulsionModel12_gcal","category":"page"},{"location":"cmodels.html#PeriDyn.repulsion_force","page":"Contact models","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::LJRepulsionModel12)\n\nCalculates repulsive acceleration for 1-2 materials block interaction.\n\n\n\n\n\nrepulsion_force(dr, RepMod::LJRepulsionModel11)\n\nCalculates repulsive acceleration for 1-1 materials block interaction.\n\n\n\n\n\nrepulsion_force(dr, RepMod::ShortRangeRepulsionModel12)\n\nCalculates the repulsive acceleration for 1-2 materials block interaction.\n\nArguments:\n\ndr: Vector{Float64}, the displacement vector between particles.\nRepMod: ShortRangeRepulsionModel12, the repulsion model for 1-2 material blocks.\n\nReturns:\n\nVector{Float64}: The repulsive acceleration vector.\n\n\n\n\n\nrepulsion_force(dr, RepMod::ShortRangeRepulsionModel11)\n\nCalculates the repulsive acceleration for 1-1 materials block interaction.\n\nArguments:\n\ndr: Vector{Float64}, the displacement vector between particles.\nRepMod: ShortRangeRepulsionModel11, the repulsion model for 1-1 material blocks.\n\nReturns:\n\nVector{Float64}: The repulsive acceleration vector.\n\n\n\n\n\nrepulsion_force(dr, RepMod::NonLinearRepulsionModel12)\n\nCalculates the repulsive acceleration for 1-2 material block interaction.\n\nArguments:\n\ndr: The vector representing the distance between particles.\nRepMod: The NonLinearRepulsionModel12 object.\n\nReturns: The repulsive acceleration as a vector.\n\n\n\n\n\nrepulsion_force(dr, RepMod::NonLinearRepulsionModel11)\n\nCalculates the repulsive acceleration for 1-1 material block interaction.\n\nArguments:\n\ndr: The vector representing the distance between particles.\nRepMod: The NonLinearRepulsionModel11 object.\n\nReturns: The repulsive acceleration as a vector.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.short_range_repulsion!","page":"Contact models","title":"PeriDyn.short_range_repulsion!","text":"short_range_repulsion!(y, f, type, RepulsionModel)\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points.\nf: Acceleration of material points.\ntype: Type of material points.\nRepulsionModel: Repulsion model (see contacts.jl for more details).\n\nOutput\n\nNone (Inplace update of f (acceleration)).\n\n\n\n\n\nshort_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11)\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\nshort_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11, device::Type{Val{:cuda}})\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\ndevice::Type{Val{:cuda}}: Device type for CUDA acceleration\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\nshort_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11, device::Type{Val{:cpu}})\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\ndevice::Type{Val{:cpu}}: Device type for CPU acceleration\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.collision_box","page":"Contact models","title":"PeriDyn.collision_box","text":"collision_box(x1::Array{Float64,2}, x2::Array{Float64,2}, skin::Float64)\n\nCalculates collision box between two material blocks.\n\nArguments\n\nx1: Positions of material points (block 1)\nx2: Positions of material points (block 2)\nskin: Extra distance to consider (usually >= particle size)\n\nOutput\n\nbox_min: Minimum position limits for overlap\nbox_max: Maximum position limits for overlap\nifoverlap: Boolean indicating if there is an overlap\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.update_repulsive_neighs!","page":"Contact models","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(y, type, RM::RepulsionModel12; max_part=nothing)\n\nUpdate neighbor list for repulsive force calculation (1-2 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel12: Repulsion model\nmax_part=nothing: Maximum number of particles (optional)\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11; kwargs...)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model\nkwargs...: Additional keyword arguments\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Symbol; kwargs...)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction) on a specific device.\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model\ndevice::Symbol: Device type for acceleration\nkwargs...: Additional keyword arguments\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\nupdate_repulsive_neighs!(neighbors, x, search_distance, equi_dist, family, intact, max_part)\n\nUpdate the neighbor list for repulsive force calculation.\n\nArguments\n\nneighbors: Array storing the neighbor indices\nx: Positions of material points\nsearch_distance: Maximum search distance for neighbors\nequi_dist: Equilibrium distance for repulsion\nfamily: Array indicating the family relationship between material points\nintact: Array indicating if the family relationship is intact\nmax_part: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbors array in place.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Type{Val{:cpu}}; max_part=30)\n\nUpdate the neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model for 1-1 interaction\ndevice::Type{Val{:cpu}}: Device type (CPU)\nmax_part=30: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbor list in the RM object.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Type{Val{:cuda}}; max_part=30)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model for 1-1 interaction\ndevice::Type{Val{:cuda}}: Device type (CUDA)\nmax_part=30: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbor list in the RM object.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.RepulsionModel11_gcal","page":"Contact models","title":"PeriDyn.RepulsionModel11_gcal","text":"RepulsionModel11_gcal(mat1, distanceX, max_neighs)\n\nCalculate the parameters for RepulsionModel11 based on the input material, distance, and maximum neighbors.\n\nArguments:\n\nmat1: The material (type RepulsionModel11).\ndistanceX: The distance factor.\nmax_neighs: The maximum number of neighbors.\n\nReturns a tuple containing the calculated parameters for RepulsionModel11.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.RepulsionModel12_gcal","page":"Contact models","title":"PeriDyn.RepulsionModel12_gcal","text":"RepulsionModel12_gcal(mat1, mat2, distanceX, max_neighs)\n\nCalculate the parameters for RepulsionModel12 based on the input materials, distance, and maximum neighbors.\n\nArguments:\n\nmat1: The first material (type RepulsionModel11).\nmat2: The second material (type RepulsionModel11).\ndistanceX: The distance factor.\nmax_neighs: The maximum number of neighbors.\n\nReturns a tuple containing the calculated parameters for RepulsionModel12.\n\n\n\n\n\n","category":"function"},{"location":"toc.html#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"toc.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n            \"index.md\",\n            \"autodocs.md\"\n        ]\nDepth = 3","category":"page"},{"location":"solvers.html#Solvers","page":"Solvers","title":"Solvers","text":"","category":"section"},{"location":"mmodels.html#Material-models","page":"Material models","title":"Material models","text":"","category":"section"},{"location":"bc.html#Boundary-conditions","page":"Boundary Conditions","title":"Boundary conditions","text":"","category":"section"},{"location":"bc.html","page":"Boundary Conditions","title":"Boundary Conditions","text":"BoundaryCondition","category":"page"},{"location":"bc.html#PeriDyn.BoundaryCondition","page":"Boundary Conditions","title":"PeriDyn.BoundaryCondition","text":"BoundaryCondition\n\nAbstract type for boundary conditions.\n\n\n\n\n\n","category":"type"},{"location":"bc.html","page":"Boundary Conditions","title":"Boundary Conditions","text":"apply_bc!\napply_bc_at0!\ncheck!","category":"page"},{"location":"bc.html#PeriDyn.apply_bc!","page":"Boundary Conditions","title":"PeriDyn.apply_bc!","text":"apply_bc!(env, BC::BoundaryCondition, on::Symbol)\n\nApply the specified boundary condition BC to the given environment env on the specified aspect on.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The boundary condition to apply.\non::Symbol: The aspect on which the boundary condition is applied (:position or :velocity).\n\n\n\n\n\napply_bc!(env, BC::BoundaryCondition, ::Type{Val{:position}})\n\nApply the general boundary condition BC to the position aspect of the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The general boundary condition to apply.\n\n\n\n\n\napply_bc!(env, BC::BoundaryCondition, ::Type{Val{:velocity}})\n\nApply the general boundary condition BC to the velocity aspect of the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The general boundary condition to apply.\n\n\n\n\n\n","category":"function"},{"location":"bc.html#PeriDyn.apply_bc_at0!","page":"Boundary Conditions","title":"PeriDyn.apply_bc_at0!","text":"apply_bc_at0!(env, BC::BoundaryCondition)\n\nApply the boundary condition BC to the given environment env at the start of the simulation (t=0).\n\n\n\n\n\napply_bc_at0!(env, BC::FixBC)\n\nApply the FixBC boundary condition at time 0 to the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The FixBC boundary condition to apply.\n\n\n\n\n\napply_bc_at0!(env, BC::ToFroBC)\n\nApply the ToFroBC boundary condition at time 0 to the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The ToFroBC boundary condition to apply.\n\n\n\n\n\napply_bc_at0!(env, BC::DeltaScaleBC)\n\nApply the DeltaScaleBC boundary condition at time 0 to the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The DeltaScaleBC boundary condition to apply.\n\n\n\n\n\napply_bc_at0!(env, BC::ScaleFixWaitBC)\n\nApply the ScaleFixWaitBC boundary condition at time 0.\n\nArguments\n\nenv: Environment in which the condition is applied.\nBC: Instance of ScaleFixWaitBC boundary condition.\n\n\n\n\n\n","category":"function"},{"location":"bc.html#PeriDyn.check!","page":"Boundary Conditions","title":"PeriDyn.check!","text":"check!(env, BC::BoundaryCondition)\n\nCheck if the boundary condition BC has changed and updates the BC. Used for dynamic boundary conditions.\n\n\n\n\n\ncheck!(BC::ToFroBC, env)\n\nPerform a check on the ToFroBC boundary condition.\n\nArguments\n\nBC: The ToFroBC boundary condition to check.\nenv: The environment associated with the boundary condition.\n\n\n\n\n\ncheck!(BC::DeltaScaleBC, env)\n\nPerform a check on the DeltaScaleBC boundary condition.\n\nArguments\n\nBC: The DeltaScaleBC boundary condition to check.\nenv: The environment associated with the boundary condition.\n\n\n\n\n\ncheck!(BC::ScaleFixWaitBC, env)\n\nCheck if the ScaleFixWaitBC boundary condition needs to be applied.\n\nArguments\n\nBC: Instance of ScaleFixWaitBC boundary condition.\nenv: Environment in which the condition is applied.\n\n\n\n\n\n","category":"function"},{"location":"bc.html","page":"Boundary Conditions","title":"Boundary Conditions","text":"FixBC\nFixBC(bool; onlyatstart=false)","category":"page"},{"location":"bc.html#PeriDyn.FixBC","page":"Boundary Conditions","title":"PeriDyn.FixBC","text":"FixBC\n\nStruct representing the FixBC boundary condition.\n\nFields\n\nbool: Boolean array specifying the affected elements.\nlast: Last position of the affected elements.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start.\nxF: Function for updating the velocity.\nvF: Function for updating the position.\n\n\n\n\n\n","category":"type"},{"location":"bc.html#PeriDyn.FixBC-Tuple{Any}","page":"Boundary Conditions","title":"PeriDyn.FixBC","text":"FixBC(bool; onlyatstart=false)\n\nConstruct a FixBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start (default: false).\n\nReturns\n\nA FixBC object representing the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"bc.html","page":"Boundary Conditions","title":"Boundary Conditions","text":"ToFroBC\nToFroBC(bool, rate, freq; applyafter=0, onlyatstart=false)\nMoveBC","category":"page"},{"location":"bc.html#PeriDyn.ToFroBC","page":"Boundary Conditions","title":"PeriDyn.ToFroBC","text":"ToFroBC\n\nStruct representing the ToFroBC boundary condition.\n\nFields\n\nbool: Boolean array specifying the affected elements.\nlast: Last position of the affected elements.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start.\nxF: Function for updating the velocity.\nvF: Function for updating the position.\ndirection: Direction of movement.\nfreq: Frequency at which the direction of movement changes.\napplyafter: Number of steps after which the frequency is applied.\n\n\n\n\n\n","category":"type"},{"location":"bc.html#PeriDyn.ToFroBC-Tuple{Any, Any, Any}","page":"Boundary Conditions","title":"PeriDyn.ToFroBC","text":"ToFroBC(bool, rate, freq; applyafter=0, onlyatstart=false)\n\nConstruct a ToFroBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nrate: Rate at which the elements move.\nfreq: Frequency at which the direction of movement changes.\napplyafter: Number of steps after which the frequency is applied (default: 0).\nonlyatstart: Flag indicating if the boundary condition is applied only at the start (default: false).\n\nReturns\n\nA ToFroBC object representing the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"bc.html#PeriDyn.MoveBC","page":"Boundary Conditions","title":"PeriDyn.MoveBC","text":"MoveBC(bool, rate; kwargs...)\n\nCreate a MoveBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nrate: Rate at which the elements move.\nkwargs: Additional keyword arguments passed to ToFroBC.\n\nReturns\n\nA MoveBC object representing the boundary condition. All MoveBC objects are ToFroBC objects with frequency Inf.\n\n\n\n\n\n","category":"function"},{"location":"bc.html","page":"Boundary Conditions","title":"Boundary Conditions","text":"DeltaScaleBC\nDeltaScaleBC(bool, scale, fixpoint; onlyatstart=false)","category":"page"},{"location":"bc.html#PeriDyn.DeltaScaleBC","page":"Boundary Conditions","title":"PeriDyn.DeltaScaleBC","text":"DeltaScaleBC\n\nStruct representing the DeltaScaleBC boundary condition.\n\nFields\n\nbool: Boolean array specifying the affected elements.\nlast: Last position of the affected elements.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start.\nxF: Function for updating the velocity.\nvF: Function for updating the position.\n\n\n\n\n\n","category":"type"},{"location":"bc.html#PeriDyn.DeltaScaleBC-Tuple{Any, Any, Any}","page":"Boundary Conditions","title":"PeriDyn.DeltaScaleBC","text":"DeltaScaleBC(bool, scale, fixpoint; onlyatstart=false)\n\nConstruct a DeltaScaleBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nscale: Scale factor applied to the elements.\nfixpoint: Reference point used for scaling.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start (default: false).\n\nReturns\n\nA DeltaScaleBC object representing the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"bc.html","page":"Boundary Conditions","title":"Boundary Conditions","text":"ScaleFixWaitBC\nScaleFixWaitBC(bool, scale, fixpoint, wait, scalebool; applyafter=0, onlyatstart=false)","category":"page"},{"location":"bc.html#PeriDyn.ScaleFixWaitBC","page":"Boundary Conditions","title":"PeriDyn.ScaleFixWaitBC","text":"ScaleFixWaitBC\n\nStructure representing a ScaleFixWaitBC boundary condition.\n\nFields\n\nbool: Boolean array specifying the affected elements.\nlast: Last position of the affected elements.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start.\nxF: Function for updating the velocity.\nvF: Function for updating the position.\ncheckF: Function for checking if the boundary condition needs to be applied.\n\n\n\n\n\n","category":"type"},{"location":"bc.html#PeriDyn.ScaleFixWaitBC-NTuple{5, Any}","page":"Boundary Conditions","title":"PeriDyn.ScaleFixWaitBC","text":"ScaleFixWaitBC(bool, scale, fixpoint, wait, scalebool; applyafter=0, onlyatstart=false)\n\nConstruct a ScaleFixWaitBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nscale: Scale factor for the elements.\nfixpoint: Fix point for the elements.\nwait: Number of time steps to wait before applying the condition.\nscalebool: Boolean array specifying the elements to be scaled.\napplyafter: Number of time steps after which the condition is applied (default: 0).\nonlyatstart: Boolean indicating whether the condition is applied only at the start (default: false).\n\nReturns\n\nAn instance of ScaleFixWaitBC boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"materialgeometry.html","page":"Material Geometry","title":"Material Geometry","text":"Creating material points for a given geometry can be done using MaterialPoints.jl package. Please see the package documentation and examples.","category":"page"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html#Basic-examples","page":"Examples","title":"Basic examples","text":"","category":"section"},{"location":"examples.html#Tensile-simulation-of-a-bar","page":"Examples","title":"Tensile simulation of a bar","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"To simulate the tensile behavior of a bar using the PeriDyn package, you can follow these steps:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Activate the PeriDyn environment by running the following code from the PeriDyn package directory. This will activate the environment and install the required packages or install package first.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Pkg\nPkg.activate(\".\")\nPkg.instantiate()","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Import the PeriDyn and PDMaterialPoints packages.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PeriDyn\nusing PDMaterialPoints","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Create the geometry of the material block using a Cuboid shape and a specified resolution. Then create a material generator using the created geometry and resolution. In this example, we create a bar with dimensions 20x5x5 mm and a resolution of 0.5 mm.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"info: Info\nUnits are abstracted in the PeriDyn package, so you can use any unit system as long as it is consistent.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"resolution = 0.5\n\nx1, v1, y1, vol1, type1 = unpack(create(Cuboid([0 20; 0 5; 0 5]), resolution=resolution))  # mm\nmat_gen1 = GeneralMaterial(y1, v1, x1, vol1, type1, 3.0*resolution; max_neigh=200)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Define the material parameters such as Young's modulus (Es), Poisson's ratio (nu), density (den), and critical stretch (cstretch). Then create a bond-based material block using the specified material parameters:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Es = 70 # GPa\nnu = 0.15\nK = Es/3/(1-2nu)\nG = Es/2/(1+nu)\nden = 2.2 * 1000.0 # Kg/m3\ncstretch = 0.15\n\nmat_spec1 = BondBasedSpecific([K], [cstretch], [den])\n# mat_spec1 = OrdinaryStateBasedSpecific([K], [G], [cstretch], [den])\n\nblock1 = PeridynamicsMaterial(mat_gen1, mat_spec1)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Choose a solver for the simulation. In this example, we use the DSVelocityVerlet solver and set the number of steps (Steps), file write frequency (fwf), and neighbor update frequency (nuf):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"solver = DSVelocityVerlet()\nSteps, fwf, nuf = 2000, 100, 10","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Define the boundary conditions for the simulation. Here, we fix the left part of the bar (y1[1, :] .< 4.0) and move the right part of the bar (y1[1, :] .> 16.0) with a constant velocity:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"BC1 = FixBC(y1[1, :] .< 4.0)\nvelocity = [0.05*20/Steps/dt, 0.0, 0.0]\nBC2 = MoveBC(y1[1, :] .> 16.0, velocity)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Define a repulsive contact model. In this example, we use a LinearRepulsionModel with a spring constant (k) and the material block defined earlier (block1):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"k = 1.0\nRM1 = LinearRepulsionModel(k, block1; distanceX=3, max_neighs=200)\nRMs = [RM1]","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Create a PeriDyn environment by specifying the material blocks, repulsion models, boundary conditions, and time step (dt):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"dt = 1e-3\nenv = PeriDyn.Env(1, [block1], RMs, [BC1, BC2], dt)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Customize the PeriDyn environment by setting parameters and defining a collection function. In this example, we set the \"left\" parameter to select the left part of the bar and collect the force values in the \"Out\" dictionary:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"env.Params = Dict(\"left\" => (y\n\n1[1,:] .< 4))\n\nenv.Out = Dict(\"Force\" => zeros(3, Steps))\n\nenv.Collect! = function (env, step)\n    env.Out[\"Force\"][:, step] = sum(env.f[:, env.Params[\"left\"]], dims=2)\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Run the simulation using the run! function and specify the number of steps, solver, file write frequency, output directory, and start index. Additionally, write the simulation output to a JLD file or Ovito files for visualization:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"out_dir = \"./output/tensile_sim_BB/$(typeof(solver))\"\n\nrun!([env], Steps, solver;\n    filewrite_freq=fwf, neigh_update_freq=nuf, out_dir=out_dir, start_at=0, ext=:jld)\n\nPeriDyn.write_data(\"$(out_dir)/env_Out.jld\"; Out=env.Out)\n\nPeriDyn.jld2ovito(\"$(out_dir)/env_1_step_*.jld\", Steps; start=0, step=fwf)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"By following these steps, you can perform a tensile simulation of a bar using the PeriDyn package and visualize the results using Ovito.","category":"page"},{"location":"list.html","page":"Index","title":"Index","text":"CurrentModule = PeriDyn","category":"page"},{"location":"list.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html#PeriDyn.jl","page":"Home","title":"PeriDyn.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation is incomplete. It will be populated soon.","category":"page"}]
}
