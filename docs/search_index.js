var documenterSearchIndex = {"docs":
[{"location":"operatorandutil.html#Operators-and-utilities","page":"Operators and utilities","title":"Operators and utilities","text":"","category":"section"},{"location":"autodocs.html","page":"Autodocs","title":"Autodocs","text":"Modules = [PeriDyn]","category":"page"},{"location":"autodocs.html#PeriDyn.BondBasedSpecific","page":"Autodocs","title":"PeriDyn.BondBasedSpecific","text":"BondBasedSpecific\n\nBond based specific material type.\n\nFields\n\nbond_stiffness::AbstractArray{T,2}: Bond stiffness matrix.\nbulk_modulus::AbstractArray{T,2}: Bulk modulus matrix.\ncritical_stretch::AbstractArray{T,2}: Critical stretch matrix.\ndensity::AbstractArray{T,1}: Density vector.\nfunc::Function: Bond force function.\n\nConstructor\n\nBondBasedSpecific(K::AbstractArray, critical_stretch::AbstractArray, density::AbstractArray; horizon=nothing, func=nothing)\nBondBasedSpecific(K::Real, critical_stretch::Real, density::Real; kwargs...)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.BondBasedSpecific-Tuple{AbstractArray, AbstractArray, AbstractArray}","page":"Autodocs","title":"PeriDyn.BondBasedSpecific","text":"BondBasedSpecific(K::AbstractArray, critical_stretch::AbstractArray, density::AbstractArray; horizon=nothing, func=nothing)\n\nConstructs BondBasedSpecific material type.\n\nArguments\n\nK::AbstractArray: Bulk modulus matrix.\ncritical_stretch::AbstractArray: Critical stretch matrix.\ndensity::AbstractArray: Density vector.\nhorizon::Real: Horizon.\nfunc::Function: Bond force function.\n\nReturns\n\nBondBasedSpecific: Bond based specific material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.BoundaryCondition","page":"Autodocs","title":"PeriDyn.BoundaryCondition","text":"Abstract class for boundary conditions.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.BoundaryConditionat0","page":"Autodocs","title":"PeriDyn.BoundaryConditionat0","text":"Abstract class for boundary conditions that are applied at time 0.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.DeltaScaleBC","page":"Autodocs","title":"PeriDyn.DeltaScaleBC","text":"Struct representing the DeltaScaleBC boundary condition.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.DeltaScaleBC-Tuple{Any, Any, Any}","page":"Autodocs","title":"PeriDyn.DeltaScaleBC","text":"DeltaScaleBC(bool, scale, fixpoint; onlyatstart=false)\n\nConstruct a DeltaScaleBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nscale: Scale factor applied to the elements.\nfixpoint: Reference point used for scaling.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start (default: false).\n\nReturns\n\nA DeltaScaleBC object representing the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.ElastoPlasticSolidMaterial","page":"Autodocs","title":"PeriDyn.ElastoPlasticSolidMaterial","text":"ElastoPlasticSolidMaterial(type::UnitRange{Int64}, general::GeneralMaterial, specific::ElastoPlasticSolidSpecific)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.ElastoPlasticSolidSpecific","page":"Autodocs","title":"PeriDyn.ElastoPlasticSolidSpecific","text":"Specific Elasto Plastic Solid Material type.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.ElastoPlasticSolidSpecific-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}, Vector{Float64}, Any}","page":"Autodocs","title":"PeriDyn.ElastoPlasticSolidSpecific","text":"ElastoPlasticSolidSpecific(bulk_modulus::Array{Float64, 1}, shear_modulus::Array{Float64,1}, critical_stretch::Array{Float64,1}, density::Array{Float64,1})\n\nSpecific Elasto Plastic Solid Material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.ElastoPlasticSolidSpecificFull","page":"Autodocs","title":"PeriDyn.ElastoPlasticSolidSpecificFull","text":"Specific Elasto Plastic Solid Material type.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.FixBC","page":"Autodocs","title":"PeriDyn.FixBC","text":"Struct representing the FixBC boundary condition.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.FixBC-Tuple{Any}","page":"Autodocs","title":"PeriDyn.FixBC","text":"FixBC(bool; onlyatstart=false)\n\nConstruct a FixBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nonlyatstart: Flag indicating if the boundary condition is applied only at the start (default: false).\n\nReturns\n\nA FixBC object representing the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.GeneralMaterial","page":"Autodocs","title":"PeriDyn.GeneralMaterial","text":"GeneralMaterial\n\nGeneral peridynamics material type.\n\nFields\n\ny::AbstractArray{Float64,2}: Displacement of the material.\nvelocity::AbstractArray{Float64,2}: Velocity of the material.\nx::AbstractArray{Float64,2}: Position of the material.\nvolume::AbstractArray{Float64,1}: Volume of the material.\ntype::AbstractArray{Int64,1}: Type of the material.\nparticle_size::Float64: Particle size of the material.\nhorizon::Float64: Horizon of the material.\nfamily::AbstractArray{Int64,2}: Family of the material.\nintact::AbstractArray{Bool, 2}: Intact of the material.\nweighted_volume::AbstractArray{Float64,1}: Weighted volume of the material.\ndeformed::AbstractVector{Bool}: Deformed of the material.\nskip_bb::Bool: Skip bond based material.\nskip_bb ? why do we need this?\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.GeneralMaterial-NTuple{6, Any}","page":"Autodocs","title":"PeriDyn.GeneralMaterial","text":"GeneralMaterial(y0, v0, x, volume, type, horizon; max_neigh=100, particle_size=0, skip_bb=false)\n\nCreates a `GeneralMaterial` type.\n\nArguments\n\ny0::AbstractArray{Float64,2}: Initial displacement of the material.\nv0::AbstractArray{Float64,2}: Initial velocity of the material.\nx::AbstractArray{Float64,2}: Initial position of the material.\nvolume::AbstractArray{Float64,1}: Volume of the material.\ntype::AbstractArray{Int64,1}: Type of the material.\nhorizon::Float64: Horizon of the material.\n\nKeyword Arguments\n\nmax_neigh::Int64 = 100: Maximum number of neighbors.\nparticle_size::Float64 = 0: Particle size of the material.\nskip_bb::Bool = false: Skip bond based material.\n\nReturns\n\nmat::GeneralMaterial: General material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.GeneralMaterial-Tuple{Dict, Vararg{Any}}","page":"Autodocs","title":"PeriDyn.GeneralMaterial","text":"GeneralMaterial(items::Dict, args...; kwargs...)\n\nCreates a `GeneralMaterial` type. `items` is a dictionary of the fields of the `GeneralMaterial` type\ntypical comes from PDMaterialPoints package.\n\nArguments\n\nitems::Dict: Dictionary of the fields of the GeneralMaterial type.\nargs...: Arguments of the GeneralMaterial type.\nkwargs...: Keyword arguments of the GeneralMaterial type.\n\nReturns\n\nmat::GeneralMaterial: General material type.\n\nsee also\n\nGeneralMaterial(y0, v0, x, volume, type, horizon; max_neigh=100, particle_size=0, skip_bb=false)\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.NonLinearRepulsionModel11","page":"Autodocs","title":"PeriDyn.NonLinearRepulsionModel11","text":"NonLinearRepulsionModel11(type::UnitRange{Int64}, bid::Int64, material::GeneralMaterial, exponent::Float64, stifness::Float64, neighs::AbstractArray{Int64, 2}, distance::Float64, max_neighs::Int64)\n\nNonlinear repulsive model for 1-1 material blocks.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.NonLinearRepulsionModel12","page":"Autodocs","title":"PeriDyn.NonLinearRepulsionModel12","text":"NonLinearRepulsionModel12(pair::Vector{UnitRange{Int64}}, exponent::Float64, stifness::Float64, equi_dist::Float64, neighs::AbstractArray{Int64, 2}, distance::Float64, max_neighs::Int64)\n\nNonlinear repulsive model for 1-2 material blocks.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.OrdinaryStateBasedMaterial","page":"Autodocs","title":"PeriDyn.OrdinaryStateBasedMaterial","text":"OrdinaryStateBasedMaterial(type::UnitRange{Int64}, general::GeneralMaterial, specific::OrdinaryStateBasedSpecific)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.OrdinaryStateBasedSpecific-NTuple{4, AbstractVector{Float64}}","page":"Autodocs","title":"PeriDyn.OrdinaryStateBasedSpecific","text":"OrdinaryStateBasedSpecific(bulk_modulus::AbstractArray{Float64, 1}, shear_modulus::AbstractArray{Float64,1}, critical_stretch::AbstractArray{Float64,1}, density::AbstractArray{Float64,1})\n\nSpecific ordinary state based materail type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.PairwiseNNMaterial","page":"Autodocs","title":"PeriDyn.PairwiseNNMaterial","text":"Bond based material type (NN).\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.PairwiseNNSpecific","page":"Autodocs","title":"PeriDyn.PairwiseNNSpecific","text":"Specific bond based material type (NN) .\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.PeridynamicsMaterial","page":"Autodocs","title":"PeriDyn.PeridynamicsMaterial","text":"PeridynamicsMaterial\n\nAbstract Peridynamics material type.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.PeridynamicsMaterial-NTuple{5, Any}","page":"Autodocs","title":"PeriDyn.PeridynamicsMaterial","text":"PeridynamicsMaterial(name, type, bid, gen, spc)\n\nCreates a peridynamics material type with given name, type, block id, general material type\nand specific material type.\n\nArguments\n\nname::String: Name of the material.\ntype::Union{UnitRange{Int64}, AbstractVector{Int64}}: Type of the material.\nbid::Int64: Block id of the material.\ngen::GeneralMaterial: General material type.\nspc::SpecificMaterial: Specific material type.\n\nReturns\n\nmat::PeridynamicsMaterial: Peridynamics material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.PeridynamicsMaterial-Tuple{Any, Any, Any, Any, ElastoPlasticSolidSpecific}","page":"Autodocs","title":"PeriDyn.PeridynamicsMaterial","text":"PeridynamicsMaterial(gen, spc::ElastoPlasticSolidSpecific)\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.PeridynamicsMaterial-Tuple{Any, Any, Any, Any, SkipSpecific}","page":"Autodocs","title":"PeriDyn.PeridynamicsMaterial","text":"PeridynamicsMaterial(gen, spc::SkipSpecific)\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.PeridynamicsMaterial-Tuple{Any, Any, Any}","page":"Autodocs","title":"PeriDyn.PeridynamicsMaterial","text":"PeridynamicsMaterial(bid, gen, spc; name=\"PeriMat\")\n\nCreates a peridynamics material type with given block id, general and specific material type. `name` is optional.\n\nArguments\n\nbid::Int64: Block id of the material.\ngen::GeneralMaterial: General material type.\nspc::SpecificMaterial: Specific material type.\nname::String: Name of the material.\n\nReturns\n\nmat::PeridynamicsMaterial: Peridynamics material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.PeridynamicsMaterial-Tuple{Any, Any}","page":"Autodocs","title":"PeriDyn.PeridynamicsMaterial","text":"PeridynamicsMaterial(gen, spc; name=\"PeriMat\")\n\nCreates a peridynamics material type with given general and specific material type. `name` is optional.\n\nArguments\n\ngen::GeneralMaterial: General material type.\nspc::SpecificMaterial: Specific material type.\nname::String: Name of the material.\n\nReturns\n\nmat::PeridynamicsMaterial: Peridynamics material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.RepulsionModel11","page":"Autodocs","title":"PeriDyn.RepulsionModel11","text":"RepulsionModel11\n\nAbstract type for repulsion model for a single material type.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.RepulsionModel12","page":"Autodocs","title":"PeriDyn.RepulsionModel12","text":"RepulsionModel12\n\nAbstract type for repulsion model for two material types.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.ScaleFixWaitBC","page":"Autodocs","title":"PeriDyn.ScaleFixWaitBC","text":"Structure representing a ScaleFixWaitBC boundary condition.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.ScaleFixWaitBC-NTuple{5, Any}","page":"Autodocs","title":"PeriDyn.ScaleFixWaitBC","text":"ScaleFixWaitBC(bool, scale, fixpoint, wait, scalebool; applyafter=0, onlyatstart=false)\n\nConstruct a ScaleFixWaitBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nscale: Scale factor for the elements.\nfixpoint: Fix point for the elements.\nwait: Number of time steps to wait before applying the condition.\nscalebool: Boolean array specifying the elements to be scaled.\napplyafter: Number of time steps after which the condition is applied (default: 0).\nonlyatstart: Boolean indicating whether the condition is applied only at the start (default: false).\n\nReturns\n\nAn instance of ScaleFixWaitBC boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.SkipMaterial","page":"Autodocs","title":"PeriDyn.SkipMaterial","text":"SkipMaterial(type::UnitRange{Int64}, general::GeneralMaterial, specific::SkipSpecific)\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.SkipSpecific","page":"Autodocs","title":"PeriDyn.SkipSpecific","text":"Specific skip materail type.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.SkipSpecific-Tuple{Any}","page":"Autodocs","title":"PeriDyn.SkipSpecific","text":"Specific skip materail type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.SpecificMaterial","page":"Autodocs","title":"PeriDyn.SpecificMaterial","text":"SpecificMaterial\n\nAbstract specific material type.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.ToFroBC","page":"Autodocs","title":"PeriDyn.ToFroBC","text":"Struct representing the ToFroBC boundary condition.\n\n\n\n\n\n","category":"type"},{"location":"autodocs.html#PeriDyn.ToFroBC-Tuple{Any, Any, Any}","page":"Autodocs","title":"PeriDyn.ToFroBC","text":"ToFroBC(bool, rate, freq; applyafter=0, onlyatstart=false)\n\nConstruct a ToFroBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nrate: Rate at which the elements move.\nfreq: Frequency at which the direction of movement changes.\napplyafter: Number of steps after which the frequency is applied (default: 0).\nonlyatstart: Flag indicating if the boundary condition is applied only at the start (default: false).\n\nReturns\n\nA ToFroBC object representing the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.Env-Tuple{Int64, Vararg{Any, 4}}","page":"Autodocs","title":"PeriDyn.Env","text":"Env(id::Int64,materials,short_range_repulsion,boundary_conds,dt;state=2)\n\nCreate a GeneralEnv for holding parameters for a simulation.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.LJRepulsionModel-Tuple{Any, Any, PeridynamicsMaterial, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.LJRepulsionModel","text":"LJRepulsionModel(alpha::Float64,epsilon::Float64, mat1::PeridynamicsMaterial,mat2::PeridynamicsMaterial;distanceX=5,max_neighs=50)\n\nLJ repulsive model for 1-2 material blocks.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.LJRepulsionModel-Tuple{Any, Any, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.LJRepulsionModel","text":"LJRepulsionModel(alpha::Float64,epsilon::Float64, mat1::PeridynamicsMaterial;distanceX=5,max_neighs=50)\n\nLJ repulsive model for 1-1 material blocks.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.LinearRepulsionModel-Tuple{Any, PeridynamicsMaterial, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.LinearRepulsionModel","text":"LinearRepulsionModel(stiffness::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a linear repulsive model for 1-2 material blocks. The constructors internally call the NonLinearRepulsionModel constructor with a nonlinearity parameter of 1 and the provided arguments.\n\nArguments:\n\nstiffness: The stiffness coefficient for the repulsive model.\nmat1: PeridynamicsMaterial representing the first material block.\nmat2: PeridynamicsMaterial representing the second material block.\ndistanceX: Optional keyword argument specifying the distance parameter (default: 5).\nmax_neighs: Optional keyword argument specifying the maximum number of neighbors (default: 50).\n\nReturns:\n\nAn instance of the LinearRepulsionModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.LinearRepulsionModel-Tuple{Any, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.LinearRepulsionModel","text":"LinearRepulsionModel(stiffness::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a linear repulsive model for 1-1 material blocks. The constructors internally call the NonLinearRepulsionModel constructor with a nonlinearity parameter of 1 and the provided arguments.\n\nArguments:\n\nstiffness: The stiffness coefficient for the repulsive model.\nmat1: PeridynamicsMaterial representing the material block.\ndistanceX: Optional keyword argument specifying the distance parameter (default: 5).\nmax_neighs: Optional keyword argument specifying the maximum number of neighbors (default: 50).\n\nReturns:\n\nAn instance of the LinearRepulsionModel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.MoveBC-Tuple{Any, Any}","page":"Autodocs","title":"PeriDyn.MoveBC","text":"MoveBC(bool, rate; kwargs...)\n\nCreate a MoveBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nrate: Rate at which the elements move.\nkwargs: Additional keyword arguments passed to ToFroBC.\n\nReturns\n\nA MoveBC object representing the boundary condition. All MoveBC objects are ToFroBC objects with frequency Inf.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.NonLinearRepulsionModel-Tuple{Any, Any, PeridynamicsMaterial, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.NonLinearRepulsionModel","text":"NonLinearRepulsionModel(exponent::Float64, stifness::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceD=1.0, distanceX=3.0, max_neighs=50)\n\nConstructs a nonlinear repulsive model for 1-2 material blocks.\n\nArguments:\n\nexponent: The exponent for the repulsive force calculation.\nstifness: The stiffness coefficient for the repulsive force calculation.\nmat1: The first PeridynamicsMaterial.\nmat2: The second PeridynamicsMaterial.\ndistanceD: The distance factor for determining the search distance of neighbors within the same material.\ndistanceX: The distance factor for determining the search distance of neighbors between different materials.\nmax_neighs: The maximum number of neighbors to consider.\n\nReturns: A NonLinearRepulsionModel12 object.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.NonLinearRepulsionModel-Tuple{Any, Any, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.NonLinearRepulsionModel","text":"NonLinearRepulsionModel(exponent::Float64, stifness::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a nonlinear repulsive model for 1-1 material blocks.\n\nArguments:\n\nexponent: The exponent for the repulsive force calculation.\nstifness: The stiffness coefficient for the repulsive force calculation.\nmat1: The PeridynamicsMaterial.\ndistanceX: The distance factor for determining the search distance of neighbors.\nmax_neighs: The maximum number of neighbors to consider.\n\nReturns: A NonLinearRepulsionModel11 object.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.RepulsionModel11_gcal-Tuple{Any, Any, Any}","page":"Autodocs","title":"PeriDyn.RepulsionModel11_gcal","text":"RepulsionModel11_gcal(mat1, distanceX, max_neighs)\n\nCalculate the parameters for RepulsionModel11 based on the input material, distance, and maximum neighbors.\n\nArguments:\n\nmat1: The material (type RepulsionModel11).\ndistanceX: The distance factor.\nmax_neighs: The maximum number of neighbors.\n\nReturns a tuple containing the calculated parameters for RepulsionModel11.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.RepulsionModel12_gcal-NTuple{4, Any}","page":"Autodocs","title":"PeriDyn.RepulsionModel12_gcal","text":"RepulsionModel12_gcal(mat1, mat2, distanceX, max_neighs)\n\nCalculate the parameters for RepulsionModel12 based on the input materials, distance, and maximum neighbors.\n\nArguments:\n\nmat1: The first material (type RepulsionModel11).\nmat2: The second material (type RepulsionModel11).\ndistanceX: The distance factor.\nmax_neighs: The maximum number of neighbors.\n\nReturns a tuple containing the calculated parameters for RepulsionModel12.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.ShortRangeRepulsionModel-Tuple{Any, PeridynamicsMaterial, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.ShortRangeRepulsionModel","text":"ShortRangeRepulsionModel(spring_const::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nCreate a ShortRangeRepulsionModel for 1-2 material blocks.\n\nArguments:\n\nspring_const: Float64, the spring constant for repulsion.\nmat1: PeridynamicsMaterial, the first material block.\nmat2: PeridynamicsMaterial, the second material block.\ndistanceX: Float64, the distance factor for neighbor searching. Default is 5.\nmax_neighs: Int64, the maximum number of neighbors. Default is 50.\n\nReturns:\n\nShortRangeRepulsionModel12: The ShortRangeRepulsionModel for 1-2 material blocks.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.ShortRangeRepulsionModel-Tuple{Any, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.ShortRangeRepulsionModel","text":"ShortRangeRepulsionModel(spring_const::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nCreate a ShortRangeRepulsionModel for 1-1 material blocks.\n\nArguments:\n\nspring_const: Float64, the spring constant for repulsion.\nmat1: PeridynamicsMaterial, the material block.\ndistanceX: Float64, the distance factor for neighbor searching. Default is 5.\nmax_neighs: Int64, the maximum number of neighbors. Default is 50.\n\nReturns:\n\nShortRangeRepulsionModel11: The ShortRangeRepulsionModel for 1-1 material blocks.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn._cudaconvert-Tuple{T} where T<:Union{RepulsionModel11, RepulsionModel12}","page":"Autodocs","title":"PeriDyn._cudaconvert","text":"_cudaconvert(x::T) where T <: Union{RepulsionModel11,RepulsionModel12}\n\nConverts a single RepulsionModel11 or RepulsionModel12 object to a CUDA-compatible type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn._cudaconvert-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Union{RepulsionModel11, RepulsionModel12}","page":"Autodocs","title":"PeriDyn._cudaconvert","text":"_cudaconvert(x::Vector{T}) where T <: Union{RepulsionModel11,RepulsionModel12}\n\nConverts a vector of RepulsionModel11 or RepulsionModel12 objects to CUDA-compatible types.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn._tij-NTuple{6, Any}","page":"Autodocs","title":"PeriDyn._tij","text":"_tij(x,mi,thetai,eij,K,G)::Float64\n\ncalculates tij force density magnitude (actually acceleration).\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.apply_bc!-Union{Tuple{T}, Tuple{Any, T, Symbol}} where T<:PeriDyn.BoundaryCondition","page":"Autodocs","title":"PeriDyn.apply_bc!","text":"apply_bc!(env, BC::BoundaryCondition, on::Symbol)\n\nApply the specified boundary condition BC to the given environment env on the specified aspect on.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The boundary condition to apply.\non::Symbol: The aspect on which the boundary condition is applied (:position or :velocity).\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.apply_bc!-Union{Tuple{T}, Tuple{Any, T, Type{Val{:position}}}} where T<:PeriDyn.BoundaryCondition","page":"Autodocs","title":"PeriDyn.apply_bc!","text":"apply_bc!(env, BC::BoundaryCondition, ::Type{Val{:position}})\n\nApply the general boundary condition BC to the position aspect of the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The general boundary condition to apply.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.apply_bc!-Union{Tuple{T}, Tuple{Any, T, Type{Val{:velocity}}}} where T<:PeriDyn.BoundaryCondition","page":"Autodocs","title":"PeriDyn.apply_bc!","text":"apply_bc!(env, BC::BoundaryCondition, ::Type{Val{:velocity}})\n\nApply the general boundary condition BC to the velocity aspect of the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The general boundary condition to apply.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.apply_bc_at0!-Tuple{Any, DeltaScaleBC}","page":"Autodocs","title":"PeriDyn.apply_bc_at0!","text":"apply_bc_at0!(env, BC::DeltaScaleBC)\n\nApply the DeltaScaleBC boundary condition at time 0 to the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The DeltaScaleBC boundary condition to apply.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.apply_bc_at0!-Tuple{Any, FixBC}","page":"Autodocs","title":"PeriDyn.apply_bc_at0!","text":"apply_bc_at0!(env, BC::FixBC)\n\nApply the FixBC boundary condition at time 0 to the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The FixBC boundary condition to apply.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.apply_bc_at0!-Tuple{Any, ScaleFixWaitBC}","page":"Autodocs","title":"PeriDyn.apply_bc_at0!","text":"apply_bc_at0!(env, BC::ScaleFixWaitBC)\n\nApply the ScaleFixWaitBC boundary condition at time 0.\n\nArguments\n\nenv: Environment in which the condition is applied.\nBC: Instance of ScaleFixWaitBC boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.apply_bc_at0!-Tuple{Any, ToFroBC}","page":"Autodocs","title":"PeriDyn.apply_bc_at0!","text":"apply_bc_at0!(env, BC::ToFroBC)\n\nApply the ToFroBC boundary condition at time 0 to the given environment env.\n\nArguments\n\nenv: The environment to which the boundary condition is applied.\nBC: The ToFroBC boundary condition to apply.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.cal_family!-Tuple{Matrix{Int64}, Matrix{Float64}, Float64}","page":"Autodocs","title":"PeriDyn.cal_family!","text":"cal_family!(family::Array{Int64,2},x::Array{Float64,2}, horizon::Float64)\n\nCalculate family members for each material point (inplace).\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.cal_family-Tuple{Matrix{Float64}, Float64, Int64}","page":"Autodocs","title":"PeriDyn.cal_family","text":"cal_family!(family::Array{Int64,2},x::Array{Float64,2}, horizon::Float64)\n\nCalculate family members for each material point.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.cell_number-NTuple{4, Any}","page":"Autodocs","title":"PeriDyn.cell_number","text":"cell_number(i,j,k,N)\n\nCalculates cell number for given i,j,k cell indices (when in a list).\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.check!-Tuple{DeltaScaleBC, Any}","page":"Autodocs","title":"PeriDyn.check!","text":"check!(BC::DeltaScaleBC, env)\n\nPerform a check on the DeltaScaleBC boundary condition.\n\nArguments\n\nBC: The DeltaScaleBC boundary condition to check.\nenv: The environment associated with the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.check!-Tuple{ScaleFixWaitBC, Any}","page":"Autodocs","title":"PeriDyn.check!","text":"check!(BC::ScaleFixWaitBC, env)\n\nCheck if the ScaleFixWaitBC boundary condition needs to be applied.\n\nArguments\n\nBC: Instance of ScaleFixWaitBC boundary condition.\nenv: Environment in which the condition is applied.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.check!-Tuple{ToFroBC, Any}","page":"Autodocs","title":"PeriDyn.check!","text":"check!(BC::ToFroBC, env)\n\nPerform a check on the ToFroBC boundary condition.\n\nArguments\n\nBC: The ToFroBC boundary condition to check.\nenv: The environment associated with the boundary condition.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.collision_box-Tuple{AbstractArray, AbstractArray, Float64}","page":"Autodocs","title":"PeriDyn.collision_box","text":"collision_box(x1::Array{Float64,2}, x2::Array{Float64,2}, skin::Float64)\n\nCalculates collision box between two material blocks.\n\nArguments\n\nx1: Positions of material points (block 1)\nx2: Positions of material points (block 2)\nskin: Extra distance to consider (usually >= particle size)\n\nOutput\n\nbox_min: Minimum position limits for overlap\nbox_max: Maximum position limits for overlap\nifoverlap: Boolean indicating if there is an overlap\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.dilatation!-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Type{Val{:cuda}}}","page":"Autodocs","title":"PeriDyn.dilatation!","text":"dilatation(y, x, intact, family, volume, m, particle_size, horizon, ::Type{Val{:cuda}})\n\nIt gives dilatation as given ordinary state material model.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.dilatation!-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Any, Type{Val{:cpu}}}","page":"Autodocs","title":"PeriDyn.dilatation!","text":"dilatation(y, x, intact, family, volume, m, particle_size, horizon, device::Type{Val{:cpu}})\n\nIt gives dilatation as given ordinary state material model.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.dilatation-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Type{Val{:cpu}}}","page":"Autodocs","title":"PeriDyn.dilatation","text":"dilatation(y, x, intact, family, volume, m, particle_size, horizon, device::Type{Val{:cpu}})\n\nIt gives dilatation as given ordinary state material model.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.dilatation-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Type{Val{:cuda}}}","page":"Autodocs","title":"PeriDyn.dilatation","text":"dilatation(y, x, intact, family, volume, m, particle_size, horizon, device::Type{Val{:cuda}})\n\nIt gives dilatation as given ordinary state material model.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density-Tuple{Any, Any, Any, PeridynamicsMaterial}","page":"Autodocs","title":"PeriDyn.force_density","text":"force_density_T(f, y, limits, mat::PeridynamicsMaterial)\n\nCalculates the force of the material.\n\nArguments\n\nf::AbstractArray{Float64,2}: Force of the material.\ny::AbstractArray{Float64,2}: Displacement of the material.\nlimits::AbstractVector{Int64}: Limits of the material.\nmat::PeridynamicsMaterial: Peridynamics material type.\n\nReturns (may be in-place)\n\nf::AbstractArray{Float64,2}: Force of the material.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{AbstractMatrix{Float64}, AbstractMatrix{Float64}, Any, BondBasedMaterial, Type{Val{:cuda}}}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(force::AbstractArray{Float64,2}, y::AbstractArray{Float64,2}, limits, mat::BondBasedMaterial, ::Type{Val{:cuda}}; particles=nothing)\n\nCalculates force density (actually acceleration) for bond based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{AbstractMatrix{Float64}, AbstractMatrix{Float64}, Any, OrdinaryStateBasedMaterial, Type{Val{:cuda}}}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(force::AbstractArray{Float64,2}, y::AbstractArray{Float64,2}, limits, mat::OrdinaryStateBasedMaterial, device::Type{Val{:cuda}}; particles=nothing)\n\nCalculates force density (actually acceleration) for bond based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Any, AbstractMatrix{AbstractFloat}, Any, SkipMaterial}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(mat::SkipMaterial)\n\nCalculates force density (actually acceleration) for bond based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Any, AbstractMatrix{Float64}, Any, BondBasedMaterial}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(mat::BondBasedMaterial)\n\nCalculates force density (actually acceleration) for bond based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Any, AbstractMatrix{Float64}, Any, OrdinaryStateBasedSpecific}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(mat::BondBasedMaterial)\n\nCalculates force density (actually acceleration) for bond based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Any, Any, Any, PeridynamicsMaterial, Symbol}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(f, y, limits, mat::PeridynamicsMaterial, device::Symbol)\n\nCalculates the force of the material.\n\nArguments\n\nf::AbstractArray{Float64,2}: Force of the material.\ny::AbstractArray{Float64,2}: Displacement of the material.\nlimits::AbstractVector{Int64}: Limits of the material.\nmat::PeridynamicsMaterial: Peridynamics material type.\ndevice::Symbol: Device of the material.\n\nReturns (may be in-place)\n\nf::AbstractArray{Float64,2}: Force of the material.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Any, Any, Any, PeridynamicsMaterial, Type{Val{:cpu}}}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(f, y, limits, mat::GeneralMaterial, device::Type{Val{:cpu}}; particles=nothing)\n\nCalculates the force of the material.\n\nArguments\n\nf::AbstractArray{Float64,2}: Force of the material.\ny::AbstractArray{Float64,2}: Displacement of the material.\nlimits::AbstractVector{Int64}: Limits of the material.\nmat::GeneralMaterial: General material type.\ndevice::Type{Val{:cpu}}: Device of the material.\nparticles::Union{Nothing, AbstractVector{Int64}}: Particles to calculate the force.\n\nReturns (may be in-place)\n\nf::AbstractArray{Float64,2}: Force of the material.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Matrix{Float64}, ElastoPlasticSolidMaterial}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(y::Array{Float64,2},mat::ElastoPlasticSolidMaterial)\n\nCalculates force density (actually acceleration) for ordinary state based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Matrix{Float64}, PairwiseNNMaterial, Type{Val{:cuda}}}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(mat::PairwiseNNMaterial)\n\nCalculates force density (actually acceleration) for bond based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.force_density_T-Tuple{Matrix{Float64}, PairwiseNNSpecific}","page":"Autodocs","title":"PeriDyn.force_density_T","text":"force_density_T(mat::PairwiseNNSpecific)\n\nCalculates force density (actually acceleration) for bond based material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.get_cells-Tuple{AbstractMatrix{Float64}, Number}","page":"Autodocs","title":"PeriDyn.get_cells","text":"get_cells(x::Array{Float64,2},horizon::Float64)\n\nFill cells with material points.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.get_repulsion_force_fn-Tuple{NonLinearRepulsionModel11}","page":"Autodocs","title":"PeriDyn.get_repulsion_force_fn","text":"get_repulsion_force_fn(RepMod::NonLinearRepulsionModel11)\n\nReturns a repulsion force function for a NonLinearRepulsionModel11 object.\n\nArguments:\n\nRepMod: The NonLinearRepulsionModel11 object.\n\nReturns: A repulsion force function that takes a distance vector and returns the repulsive acceleration.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.horizon_correction-Tuple{Any, Any, Any}","page":"Autodocs","title":"PeriDyn.horizon_correction","text":"horizon_correction(dr, ps, hr)\n\nIt gives horizon correction factor (It will give 1 as of now).\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.influence_function-Tuple{Any}","page":"Autodocs","title":"PeriDyn.influence_function","text":"influence_function(dr)\n\nIt gives influence function factor (It will give 1/r as of now).\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.init-Union{Tuple{T2}, Tuple{T1}, Tuple{T1, T2}} where {T1<:SpecificMaterial, T2<:GeneralMaterial}","page":"Autodocs","title":"PeriDyn.init","text":"init(spc::T1, gen::T2) where {T1<:SpecificMaterial, T2<:GeneralMaterial}\n\nInitialize specific material type. It uses information from GeneralMaterial to create SpecificMaterial type.\n\nArguments\n\nspc::T1: Specific material type.\ngen::T2: General material type.\n\nReturns\n\nspc::T1: Initialized specific material type.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.jld2array-Tuple{Any, Any}","page":"Autodocs","title":"PeriDyn.jld2array","text":"jld2array(file, N; start=0, step=100)\n\nLoads data from JLD files into an array.\n\nArguments:\n\nfile: String, the base name of the JLD files.\nN: Int, the number of files to load.\nstart: Int, the index of the first file to load. Default is 0.\nstep: Int, the step size between files to load. Default is 100.\n\nReturns:\n\nArray, an array containing the data loaded from the JLD files.\n\nNote: This function iterates over a range of files and loads data from each JLD file using the jldread function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.jld2ovito-Tuple{Any, Any}","page":"Autodocs","title":"PeriDyn.jld2ovito","text":"jld2ovito(file, N; start=0, step=100)\n\nConverts JLD files to Ovito data files.\n\nArguments:\n\nfile: String, the base name of the JLD files.\nN: Int, the number of files to convert.\nstart: Int, the index of the first file to convert. Default is 0.\nstep: Int, the step size between files to convert. Default is 100.\n\nNote: This function iterates over a range of files and converts each JLD file to an Ovito data file using the write_ovito function.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.jldread-Tuple{String}","page":"Autodocs","title":"PeriDyn.jldread","text":"jldread(filename::String)\n\nReads data from a JLD file.\n\nArguments:\n\nfilename: String, the name of the JLD file to read.\n\nReturns:\n\nDict, a dictionary containing the data read from the JLD file.\n\nNote: This function uses the load function from the JLD package to read the data from the file, and converts it to a dictionary format.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.load_from_file!-Tuple{PeriDyn.GeneralEnv, Any}","page":"Autodocs","title":"PeriDyn.load_from_file!","text":"load_from_file!(env::GeneralEnv, filename)\n\nLoads data from a file into the specified environment.\n\nArguments:\n\nenv: GeneralEnv, the environment to load the data into.\nfilename: String, the name of the file to load data from.\n\nReturns:\n\nNothing\n\nNote: This function assumes the presence of specific data fields in the file, such as \"position\", \"velocity\", and \"acceleration\".\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.make_NN-Union{Tuple{T}, Tuple{T, Any}} where T","page":"Autodocs","title":"PeriDyn.make_NN","text":"make_NN(layers::Tuple{T}, N) where T\n\nCreate an symmetrical NxN matrix from a vector of length N(N+1)/2.\n\n================\n\nReturns\n\nM :: Matrix\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.make_matrix-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Autodocs","title":"PeriDyn.make_matrix","text":"make_matrix(S::Array{T,1})\n\nCreate an symmetrical NxN matrix from a vector of length N(N+1)/2.\n\n================\n\nReturns\n\nM :: Matrix\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.make_matrix_gm-Union{Tuple{Vector{T}}, Tuple{T}} where T","page":"Autodocs","title":"PeriDyn.make_matrix_gm","text":"make_matrix(S::Array{T,1})\n\nCreate an symmetrical NxN matrix from a vector of length N(N+1)/2.\n\n================\n\nReturns\n\nM :: Matrix\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.neigh_cells-NTuple{4, Any}","page":"Autodocs","title":"PeriDyn.neigh_cells","text":"neigh_cells(i,j,k,N)\n\nCalculate all neighboring cells for i,j,k cell.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.plastic_yield_function-Tuple{Any, Any, Any}","page":"Autodocs","title":"PeriDyn.plastic_yield_function","text":"yield function\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.print_data_file!-Tuple{Array{PeriDyn.GeneralEnv}, String, Any}","page":"Autodocs","title":"PeriDyn.print_data_file!","text":"print_data_file!(envs::Array{GeneralEnv}, file_prefix::String, i::Int64)\n\nWrites data file to disk.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repack!-Tuple{Dict, Any, Any}","page":"Autodocs","title":"PeriDyn.repack!","text":"repack!(d::Dict, keys_, vals)\n\nRepack a dictionary from its components inplace.\n\nArguments\n\nd::Dict: Dictionary to be repacked.\nkeys_: Keys of the dictionary.\nvals: Values of the dictionary.\n\nReturns\n\nd::Dict: Dictionary containing the components.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repack-Tuple","page":"Autodocs","title":"PeriDyn.repack","text":"repack(args...; keys_ = (:x, :v, :y, :volume, :type))\n\nRepack a dictionary from its components.\n\nArguments\n\nargs...: Components to be packed.\nkeys_ = (:x, :v, :y, :volume, :type): Keys of the dictionary.\n\nReturns\n\nd::Dict: Dictionary containing the components.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repulsion_force-Tuple{Any, LJRepulsionModel11}","page":"Autodocs","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::LJRepulsionModel11)\n\nCalculates repulsive acceleration for 1-1 materials block interaction.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repulsion_force-Tuple{Any, LJRepulsionModel12}","page":"Autodocs","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::LJRepulsionModel12)\n\nCalculates repulsive acceleration for 1-2 materials block interaction.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repulsion_force-Tuple{Any, NonLinearRepulsionModel11}","page":"Autodocs","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::NonLinearRepulsionModel11)\n\nCalculates the repulsive acceleration for 1-1 material block interaction.\n\nArguments:\n\ndr: The vector representing the distance between particles.\nRepMod: The NonLinearRepulsionModel11 object.\n\nReturns: The repulsive acceleration as a vector.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repulsion_force-Tuple{Any, NonLinearRepulsionModel12}","page":"Autodocs","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::NonLinearRepulsionModel12)\n\nCalculates the repulsive acceleration for 1-2 material block interaction.\n\nArguments:\n\ndr: The vector representing the distance between particles.\nRepMod: The NonLinearRepulsionModel12 object.\n\nReturns: The repulsive acceleration as a vector.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repulsion_force-Tuple{Any, ShortRangeRepulsionModel11}","page":"Autodocs","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::ShortRangeRepulsionModel11)\n\nCalculates the repulsive acceleration for 1-1 materials block interaction.\n\nArguments:\n\ndr: Vector{Float64}, the displacement vector between particles.\nRepMod: ShortRangeRepulsionModel11, the repulsion model for 1-1 material blocks.\n\nReturns:\n\nVector{Float64}: The repulsive acceleration vector.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.repulsion_force-Tuple{Any, ShortRangeRepulsionModel12}","page":"Autodocs","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::ShortRangeRepulsionModel12)\n\nCalculates the repulsive acceleration for 1-2 materials block interaction.\n\nArguments:\n\ndr: Vector{Float64}, the displacement vector between particles.\nRepMod: ShortRangeRepulsionModel12, the repulsion model for 1-2 material blocks.\n\nReturns:\n\nVector{Float64}: The repulsive acceleration vector.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.save_state!-Tuple{Any, Any}","page":"Autodocs","title":"PeriDyn.save_state!","text":"save_state!(filename, env)\n\nSave env::GeneralEnv to disk.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.save_state_ovito_bc!-Tuple{Any, Any}","page":"Autodocs","title":"PeriDyn.save_state_ovito_bc!","text":"save_state_ovito_bc!(filename, env)\n\nSave env::GeneralEnv to disk.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.set_env_active!-Tuple{Any}","page":"Autodocs","title":"PeriDyn.set_env_active!","text":"set_env_active!(env)\n\nSet environment state active.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.set_env_idel!-Tuple{Any}","page":"Autodocs","title":"PeriDyn.set_env_idel!","text":"set_env_idel!(env)\n\nSet environment state idel.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.set_env_inactive!-Tuple{Any}","page":"Autodocs","title":"PeriDyn.set_env_inactive!","text":"set_env_inactive!(env)\n\nSet environment state inactive.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.set_ghost_atoms!-Tuple{Any, Any}","page":"Autodocs","title":"PeriDyn.set_ghost_atoms!","text":"set_ghost_atoms!(env,ghost_atoms)\n\nSet ghost atoms for an environment.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.short_range_model_definition-NTuple{4, Any}","page":"Autodocs","title":"PeriDyn.short_range_model_definition","text":"short_range_model_definition(spring_const, del_x, hor, dir)\n\nCalculates the repulsive force using the ShortRange repulsion model formula. The formula is: 18 * springconst / (hor^4 * pi) * (delx / hor) .* dir\n\nArguments:\n\nspring_const: Float64, the spring constant.\ndel_x: Float64, the difference in position.\nhor: Float64, the characteristic length scale.\ndir: Vector{Float64}, the direction vector.\n\nReturns:\n\nVector{Float64}: The calculated repulsive force vector.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.short_range_repulsion!-Tuple{Any, Any, Any, Any, Any, RepulsionModel11, Type{Val{:cpu}}}","page":"Autodocs","title":"PeriDyn.short_range_repulsion!","text":"short_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11, device::Type{Val{:cpu}})\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\ndevice::Type{Val{:cpu}}: Device type for CPU acceleration\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.short_range_repulsion!-Tuple{Any, Any, Any, Any, Any, RepulsionModel11, Type{Val{:cuda}}}","page":"Autodocs","title":"PeriDyn.short_range_repulsion!","text":"short_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11, device::Type{Val{:cuda}})\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\ndevice::Type{Val{:cuda}}: Device type for CUDA acceleration\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.short_range_repulsion!-Tuple{Any, Any, Any, Any, Any, RepulsionModel11}","page":"Autodocs","title":"PeriDyn.short_range_repulsion!","text":"short_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11)\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.short_range_repulsion!-Tuple{Any, Any, Any, Any, Any, RepulsionModel12}","page":"Autodocs","title":"PeriDyn.short_range_repulsion!","text":"short_range_repulsion!(y, f, type, RepulsionModel)\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points.\nf: Acceleration of material points.\ntype: Type of material points.\nRepulsionModel: Repulsion model (see contacts.jl for more details).\n\nOutput\n\nNone (Inplace update of f (acceleration)).\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.simulate!-Tuple","page":"Autodocs","title":"PeriDyn.simulate!","text":"\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.td_norm_fn-Tuple{Any, Any, Any}","page":"Autodocs","title":"PeriDyn.td_norm_fn","text":"td_norm_fn\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.unpack-Tuple{Dict}","page":"Autodocs","title":"PeriDyn.unpack","text":"unpack(d::Dict)\n\nUnpack a dictionary into its components.\n\nArguments\n\nd::Dict: Dictionary to be unpacked.\n\nReturns\n\nx::Array{Float64, 1}: x coordinates.\nv::Array{Float64, 1}: v coordinates.\ny::Array{Float64, 1}: y coordinates.\nvolume::Array{Float64, 1}: Volume of the mesh.\ntype::Array{Int64, 1}: Type of the mesh.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_acc!-Tuple{PeriDyn.GeneralEnv}","page":"Autodocs","title":"PeriDyn.update_acc!","text":"update_acc!(env::GeneralEnv)\n\nUpdates acceleration of all the material points in a simulation environment.\n\n̈u(xᵢ, t) = from material forces + from contact forces\n\nfrom material force, ̈u(xᵢ, t) = [∑ᵏⱼ₌₁ {T[xᵢ, t]<xⱼ-xᵢ> - T[xⱼ, t]<xᵢ-xⱼ> }*Vⱼ + b(xᵢ, t)] / ρᵢ\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_neighs!-Tuple{Any}","page":"Autodocs","title":"PeriDyn.update_neighs!","text":"function update_neighs!(envs)\n\nUpdates neighbors of each material point for a list of simulation environments.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_repulsive_neighs!-NTuple{7, Any}","page":"Autodocs","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(neighbors, x, search_distance, equi_dist, family, intact, max_part)\n\nUpdate the neighbor list for repulsive force calculation.\n\nArguments\n\nneighbors: Array storing the neighbor indices\nx: Positions of material points\nsearch_distance: Maximum search distance for neighbors\nequi_dist: Equilibrium distance for repulsion\nfamily: Array indicating the family relationship between material points\nintact: Array indicating if the family relationship is intact\nmax_part: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbors array in place.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_repulsive_neighs!-Tuple{Any, Any, RepulsionModel11, Symbol}","page":"Autodocs","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Symbol; kwargs...)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction) on a specific device.\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model\ndevice::Symbol: Device type for acceleration\nkwargs...: Additional keyword arguments\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_repulsive_neighs!-Tuple{Any, Any, RepulsionModel11, Type{Val{:cpu}}}","page":"Autodocs","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Type{Val{:cpu}}; max_part=30)\n\nUpdate the neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model for 1-1 interaction\ndevice::Type{Val{:cpu}}: Device type (CPU)\nmax_part=30: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbor list in the RM object.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_repulsive_neighs!-Tuple{Any, Any, RepulsionModel11, Type{Val{:cuda}}}","page":"Autodocs","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Type{Val{:cuda}}; max_part=30)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model for 1-1 interaction\ndevice::Type{Val{:cuda}}: Device type (CUDA)\nmax_part=30: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbor list in the RM object.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_repulsive_neighs!-Tuple{Any, Any, RepulsionModel11}","page":"Autodocs","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(y, type, RM::RepulsionModel11; kwargs...)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model\nkwargs...: Additional keyword arguments\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.update_repulsive_neighs!-Tuple{Any, Any, RepulsionModel12}","page":"Autodocs","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(y, type, RM::RepulsionModel12; max_part=nothing)\n\nUpdate neighbor list for repulsive force calculation (1-2 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel12: Repulsion model\nmax_part=nothing: Maximum number of particles (optional)\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.velocity_verlet_step!-Tuple{PeriDyn.GeneralEnv, DSVelocityVerlet}","page":"Autodocs","title":"PeriDyn.velocity_verlet_step!","text":"velocityverletstep!(env::GeneralEnv)\n\nImplement a single step of velocity verlet algorithm.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.weighted_volume-NTuple{5, Any}","page":"Autodocs","title":"PeriDyn.weighted_volume","text":"weighted_volume(S::GeneralMaterial)\n\nIt gives weighted volume.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.write_data-Tuple{Any}","page":"Autodocs","title":"PeriDyn.write_data","text":"write_data(filename; kwargs...)\n\nWrites the data file.\n\nArguments:\n\nfilename: String, the name of the file to be written.\nkwargs: Keyword arguments, additional options for writing the file.\n\nNote: This function supports writing files in the .data and .jld formats.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.write_global_data-Tuple{Any}","page":"Autodocs","title":"PeriDyn.write_global_data","text":"write_global_data(filename; kwargs...)\n\nWrites the global data file.\n\nArguments:\n\nfilename: String, the name of the file to be written.\nkwargs: Keyword arguments, additional options for writing the file.\n\nNote: This function writes a data file in the .jld format.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.write_ovito-Tuple{String}","page":"Autodocs","title":"PeriDyn.write_ovito","text":"write_ovito(filename::String; kwargs...)\n\nWrites data to an Ovito data file.\n\nArguments:\n\nfilename: String, the name of the file to write.\nkwargs: Keyword arguments, the data to write to the file.\n\nNote: This function writes data in Ovito data file format, with each column specified by a keyword argument.\n\n\n\n\n\n","category":"method"},{"location":"autodocs.html#PeriDyn.write_ovito_cell_ids-Tuple{String, Matrix, Any}","page":"Autodocs","title":"PeriDyn.write_ovito_cell_ids","text":"write_ovito_cell_ids(filename::String, y::Matrix, horizon)\n\nWrites cell IDs to an Ovito data file.\n\nArguments:\n\nfilename: String, the name of the file to write.\ny: Matrix, the coordinates of the particles.\nhorizon: The horizon value.\n\nNote: This function writes the cell IDs to an Ovito data file, based on the particle coordinates and horizon value.\n\n\n\n\n\n","category":"method"},{"location":"cmodels.html#Contact-models","page":"Contact models","title":"Contact models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"RepulsionModel11\nRepulsionModel12","category":"page"},{"location":"cmodels.html#Simple-Spring-Models","page":"Contact models","title":"Simple Spring Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"NonLinearRepulsionModel\nLinearRepulsionModel","category":"page"},{"location":"cmodels.html#PeriDyn.NonLinearRepulsionModel","page":"Contact models","title":"PeriDyn.NonLinearRepulsionModel","text":"NonLinearRepulsionModel(exponent::Float64, stifness::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceD=1.0, distanceX=3.0, max_neighs=50)\n\nConstructs a nonlinear repulsive model for 1-2 material blocks.\n\nArguments:\n\nexponent: The exponent for the repulsive force calculation.\nstifness: The stiffness coefficient for the repulsive force calculation.\nmat1: The first PeridynamicsMaterial.\nmat2: The second PeridynamicsMaterial.\ndistanceD: The distance factor for determining the search distance of neighbors within the same material.\ndistanceX: The distance factor for determining the search distance of neighbors between different materials.\nmax_neighs: The maximum number of neighbors to consider.\n\nReturns: A NonLinearRepulsionModel12 object.\n\n\n\n\n\nNonLinearRepulsionModel(exponent::Float64, stifness::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a nonlinear repulsive model for 1-1 material blocks.\n\nArguments:\n\nexponent: The exponent for the repulsive force calculation.\nstifness: The stiffness coefficient for the repulsive force calculation.\nmat1: The PeridynamicsMaterial.\ndistanceX: The distance factor for determining the search distance of neighbors.\nmax_neighs: The maximum number of neighbors to consider.\n\nReturns: A NonLinearRepulsionModel11 object.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.LinearRepulsionModel","page":"Contact models","title":"PeriDyn.LinearRepulsionModel","text":"LinearRepulsionModel(stiffness::Float64, mat1::PeridynamicsMaterial, mat2::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a linear repulsive model for 1-2 material blocks. The constructors internally call the NonLinearRepulsionModel constructor with a nonlinearity parameter of 1 and the provided arguments.\n\nArguments:\n\nstiffness: The stiffness coefficient for the repulsive model.\nmat1: PeridynamicsMaterial representing the first material block.\nmat2: PeridynamicsMaterial representing the second material block.\ndistanceX: Optional keyword argument specifying the distance parameter (default: 5).\nmax_neighs: Optional keyword argument specifying the maximum number of neighbors (default: 50).\n\nReturns:\n\nAn instance of the LinearRepulsionModel.\n\n\n\n\n\nLinearRepulsionModel(stiffness::Float64, mat1::PeridynamicsMaterial; distanceX=5, max_neighs=50)\n\nConstructs a linear repulsive model for 1-1 material blocks. The constructors internally call the NonLinearRepulsionModel constructor with a nonlinearity parameter of 1 and the provided arguments.\n\nArguments:\n\nstiffness: The stiffness coefficient for the repulsive model.\nmat1: PeridynamicsMaterial representing the material block.\ndistanceX: Optional keyword argument specifying the distance parameter (default: 5).\nmax_neighs: Optional keyword argument specifying the maximum number of neighbors (default: 50).\n\nReturns:\n\nAn instance of the LinearRepulsionModel.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#LJ-Models","page":"Contact models","title":"LJ Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"LJRepulsionModel","category":"page"},{"location":"cmodels.html#PeriDyn.LJRepulsionModel","page":"Contact models","title":"PeriDyn.LJRepulsionModel","text":"LJRepulsionModel(alpha::Float64,epsilon::Float64, mat1::PeridynamicsMaterial,mat2::PeridynamicsMaterial;distanceX=5,max_neighs=50)\n\nLJ repulsive model for 1-2 material blocks.\n\n\n\n\n\nLJRepulsionModel(alpha::Float64,epsilon::Float64, mat1::PeridynamicsMaterial;distanceX=5,max_neighs=50)\n\nLJ repulsive model for 1-1 material blocks.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#Functions-for-Repulsion-Models","page":"Contact models","title":"Functions for Repulsion Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"repulsion_force\nshort_range_repulsion!\ncollision_box\nupdate_repulsive_neighs!\nRepulsionModel11_gcal\nRepulsionModel12_gcal","category":"page"},{"location":"cmodels.html#PeriDyn.repulsion_force","page":"Contact models","title":"PeriDyn.repulsion_force","text":"repulsion_force(dr, RepMod::LJRepulsionModel12)\n\nCalculates repulsive acceleration for 1-2 materials block interaction.\n\n\n\n\n\nrepulsion_force(dr, RepMod::LJRepulsionModel11)\n\nCalculates repulsive acceleration for 1-1 materials block interaction.\n\n\n\n\n\nrepulsion_force(dr, RepMod::ShortRangeRepulsionModel12)\n\nCalculates the repulsive acceleration for 1-2 materials block interaction.\n\nArguments:\n\ndr: Vector{Float64}, the displacement vector between particles.\nRepMod: ShortRangeRepulsionModel12, the repulsion model for 1-2 material blocks.\n\nReturns:\n\nVector{Float64}: The repulsive acceleration vector.\n\n\n\n\n\nrepulsion_force(dr, RepMod::ShortRangeRepulsionModel11)\n\nCalculates the repulsive acceleration for 1-1 materials block interaction.\n\nArguments:\n\ndr: Vector{Float64}, the displacement vector between particles.\nRepMod: ShortRangeRepulsionModel11, the repulsion model for 1-1 material blocks.\n\nReturns:\n\nVector{Float64}: The repulsive acceleration vector.\n\n\n\n\n\nrepulsion_force(dr, RepMod::NonLinearRepulsionModel12)\n\nCalculates the repulsive acceleration for 1-2 material block interaction.\n\nArguments:\n\ndr: The vector representing the distance between particles.\nRepMod: The NonLinearRepulsionModel12 object.\n\nReturns: The repulsive acceleration as a vector.\n\n\n\n\n\nrepulsion_force(dr, RepMod::NonLinearRepulsionModel11)\n\nCalculates the repulsive acceleration for 1-1 material block interaction.\n\nArguments:\n\ndr: The vector representing the distance between particles.\nRepMod: The NonLinearRepulsionModel11 object.\n\nReturns: The repulsive acceleration as a vector.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.short_range_repulsion!","page":"Contact models","title":"PeriDyn.short_range_repulsion!","text":"short_range_repulsion!(y, f, type, RepulsionModel)\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points.\nf: Acceleration of material points.\ntype: Type of material points.\nRepulsionModel: Repulsion model (see contacts.jl for more details).\n\nOutput\n\nNone (Inplace update of f (acceleration)).\n\n\n\n\n\nshort_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11)\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\nshort_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11, device::Type{Val{:cuda}})\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\ndevice::Type{Val{:cuda}}: Device type for CUDA acceleration\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\nshort_range_repulsion!(y, f, type, bid, vol, RM::RepulsionModel11, device::Type{Val{:cpu}})\n\nUpdates (inplace) the repulsive acceleration of material points.\n\nArguments\n\ny: Positions of material points\nf: Acceleration of material points\ntype: Type of material points\nbid: BID values\nvol: Volume values\nRM::RepulsionModel11: Repulsion model\ndevice::Type{Val{:cpu}}: Device type for CPU acceleration\n\nOutput\n\nNo return value. The function updates f in place.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.collision_box","page":"Contact models","title":"PeriDyn.collision_box","text":"collision_box(x1::Array{Float64,2}, x2::Array{Float64,2}, skin::Float64)\n\nCalculates collision box between two material blocks.\n\nArguments\n\nx1: Positions of material points (block 1)\nx2: Positions of material points (block 2)\nskin: Extra distance to consider (usually >= particle size)\n\nOutput\n\nbox_min: Minimum position limits for overlap\nbox_max: Maximum position limits for overlap\nifoverlap: Boolean indicating if there is an overlap\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#PeriDyn.update_repulsive_neighs!","page":"Contact models","title":"PeriDyn.update_repulsive_neighs!","text":"update_repulsive_neighs!(y, type, RM::RepulsionModel12; max_part=nothing)\n\nUpdate neighbor list for repulsive force calculation (1-2 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel12: Repulsion model\nmax_part=nothing: Maximum number of particles (optional)\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11; kwargs...)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model\nkwargs...: Additional keyword arguments\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Symbol; kwargs...)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction) on a specific device.\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model\ndevice::Symbol: Device type for acceleration\nkwargs...: Additional keyword arguments\n\nOutput\n\nNo return value. The function updates RM.neighs in place.\n\n\n\n\n\nupdate_repulsive_neighs!(neighbors, x, search_distance, equi_dist, family, intact, max_part)\n\nUpdate the neighbor list for repulsive force calculation.\n\nArguments\n\nneighbors: Array storing the neighbor indices\nx: Positions of material points\nsearch_distance: Maximum search distance for neighbors\nequi_dist: Equilibrium distance for repulsion\nfamily: Array indicating the family relationship between material points\nintact: Array indicating if the family relationship is intact\nmax_part: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbors array in place.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Type{Val{:cpu}}; max_part=30)\n\nUpdate the neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model for 1-1 interaction\ndevice::Type{Val{:cpu}}: Device type (CPU)\nmax_part=30: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbor list in the RM object.\n\n\n\n\n\nupdate_repulsive_neighs!(y, type, RM::RepulsionModel11, device::Type{Val{:cuda}}; max_part=30)\n\nUpdate neighbor list for repulsive force calculation (1-1 interaction).\n\nArguments\n\ny: Positions of material points\ntype: Type of material points\nRM::RepulsionModel11: Repulsion model for 1-1 interaction\ndevice::Type{Val{:cuda}}: Device type (CUDA)\nmax_part=30: Maximum number of particles in a cell\n\nOutput\n\nNo return value. The function updates the neighbor list in the RM object.\n\n\n\n\n\n","category":"function"},{"location":"cmodels.html#Macros-for-generating-common-fields-of-Repulsion-Models","page":"Contact models","title":"Macros for generating common fields of Repulsion Models","text":"","category":"section"},{"location":"cmodels.html","page":"Contact models","title":"Contact models","text":"RepulsionModel11_gf\nRepulsionModel12_gf","category":"page"},{"location":"toc.html#Table-of-contents","page":"Table of contents","title":"Table of contents","text":"","category":"section"},{"location":"toc.html","page":"Table of contents","title":"Table of contents","text":"Pages = [\n            \"index.md\",\n            \"autodocs.md\"\n        ]\nDepth = 3","category":"page"},{"location":"zexamples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"zexamples.html#Quasi-static-tensile-test","page":"Examples","title":"Quasi-static tensile test","text":"","category":"section"},{"location":"zexamples.html","page":"Examples","title":"Examples","text":"this is description.","category":"page"},{"location":"zexamples.html","page":"Examples","title":"Examples","text":"a = 1","category":"page"},{"location":"solvers.html#Solvers","page":"Solvers","title":"Solvers","text":"","category":"section"},{"location":"mmodels.html#Material-models","page":"Material models","title":"Material models","text":"","category":"section"},{"location":"bc.html#Boundary-conditions","page":"Boundary conditions","title":"Boundary conditions","text":"","category":"section"},{"location":"bc.html","page":"Boundary conditions","title":"Boundary conditions","text":"FixBC\nMoveBC\nToFroBC\nScaleBC","category":"page"},{"location":"bc.html#PeriDyn.MoveBC","page":"Boundary conditions","title":"PeriDyn.MoveBC","text":"MoveBC(bool, rate; kwargs...)\n\nCreate a MoveBC boundary condition.\n\nArguments\n\nbool: Boolean array specifying the affected elements.\nrate: Rate at which the elements move.\nkwargs: Additional keyword arguments passed to ToFroBC.\n\nReturns\n\nA MoveBC object representing the boundary condition. All MoveBC objects are ToFroBC objects with frequency Inf.\n\n\n\n\n\n","category":"function"},{"location":"zzfull.html","page":"-","title":"-","text":"Modules = [PeriDyn]","category":"page"},{"location":"materialgeometry.html","page":"Material Geometry","title":"Material Geometry","text":"Creating material points for a given geometry can be done using MaterialPoints.jl package. Please see the package documentation and examples.","category":"page"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html#Basic-examples","page":"Examples","title":"Basic examples","text":"","category":"section"},{"location":"examples.html#Tensile-simulation-of-a-bar","page":"Examples","title":"Tensile simulation of a bar","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"To simulate the tensile behavior of a bar using the PeriDyn package, you can follow these steps:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Activate the PeriDyn environment by running the following code from the PeriDyn package directory. This will activate the environment and install the required packages or install package first.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Pkg\nPkg.activate(\".\")\nPkg.instantiate()","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Import the PeriDyn and PDMaterialPoints packages.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using PeriDyn\nusing PDMaterialPoints","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Create the geometry of the material block using a Cuboid shape and a specified resolution. Then create a material generator using the created geometry and resolution. In this example, we create a bar with dimensions 20x5x5 mm and a resolution of 0.5 mm.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"info: Info\nUnits are abstracted in the PeriDyn package, so you can use any unit system as long as it is consistent.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"resolution = 0.5\n\nx1, v1, y1, vol1, type1 = unpack(create(Cuboid([0 20; 0 5; 0 5]), resolution=resolution))  # mm\nmat_gen1 = GeneralMaterial(y1, v1, x1, vol1, type1, 3.0*resolution; max_neigh=200)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Define the material parameters such as Young's modulus (Es), Poisson's ratio (nu), density (den), and critical stretch (cstretch). Then create a bond-based material block using the specified material parameters:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Es = 70 # GPa\nnu = 0.15\nK = Es/3/(1-2nu)\nG = Es/2/(1+nu)\nden = 2.2 * 1000.0 # Kg/m3\ncstretch = 0.15\n\nmat_spec1 = BondBasedSpecific([K], [cstretch], [den])\n# mat_spec1 = OrdinaryStateBasedSpecific([K], [G], [cstretch], [den])\n\nblock1 = PeridynamicsMaterial(mat_gen1, mat_spec1)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Choose a solver for the simulation. In this example, we use the DSVelocityVerlet solver and set the number of steps (Steps), file write frequency (fwf), and neighbor update frequency (nuf):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"solver = DSVelocityVerlet()\nSteps, fwf, nuf = 2000, 100, 10","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Define the boundary conditions for the simulation. Here, we fix the left part of the bar (y1[1, :] .< 4.0) and move the right part of the bar (y1[1, :] .> 16.0) with a constant velocity:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"BC1 = FixBC(y1[1, :] .< 4.0)\nvelocity = [0.05*20/Steps/dt, 0.0, 0.0]\nBC2 = MoveBC(y1[1, :] .> 16.0, velocity)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Define a repulsive contact model. In this example, we use a LinearRepulsionModel with a spring constant (k) and the material block defined earlier (block1):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"k = 1.0\nRM1 = LinearRepulsionModel(k, block1; distanceX=3, max_neighs=200)\nRMs = [RM1]","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Create a PeriDyn environment by specifying the material blocks, repulsion models, boundary conditions, and time step (dt):","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"dt = 1e-3\nenv = PeriDyn.Env(1, [block1], RMs, [BC1, BC2], dt)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Customize the PeriDyn environment by setting parameters and defining a collection function. In this example, we set the \"left\" parameter to select the left part of the bar and collect the force values in the \"Out\" dictionary:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"env.Params = Dict(\"left\" => (y\n\n1[1,:] .< 4))\n\nenv.Out = Dict(\"Force\" => zeros(3, Steps))\n\nenv.Collect! = function (env, step)\n    env.Out[\"Force\"][:, step] = sum(env.f[:, env.Params[\"left\"]], dims=2)\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Run the simulation using the run! function and specify the number of steps, solver, file write frequency, output directory, and start index. Additionally, write the simulation output to a JLD file or Ovito files for visualization:","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"out_dir = \"./output/tensile_sim_BB/$(typeof(solver))\"\n\nrun!([env], Steps, solver;\n    filewrite_freq=fwf, neigh_update_freq=nuf, out_dir=out_dir, start_at=0, ext=:jld)\n\nPeriDyn.write_data(\"$(out_dir)/env_Out.jld\"; Out=env.Out)\n\nPeriDyn.jld2ovito(\"$(out_dir)/env_1_step_*.jld\", Steps; start=0, step=fwf)","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"By following these steps, you can perform a tensile simulation of a bar using the PeriDyn package and visualize the results using Ovito.","category":"page"},{"location":"list.html","page":"Index","title":"Index","text":"CurrentModule = PeriDyn","category":"page"},{"location":"list.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html#PeriDyn.jl","page":"Home","title":"PeriDyn.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation is incomplete. It will be populated soon.","category":"page"}]
}
